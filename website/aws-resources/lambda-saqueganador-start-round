import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocument } from '@aws-sdk/lib-dynamodb';


const client = new DynamoDBClient({
  region: process.env.AWS_REGION,
});
const documentClient = DynamoDBDocument.from(client);


export const handler = async (event) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    let teams = [];
    let body;
    let users;
    let statusCode = '200';
    const headers = {
        'Content-Type': 'application/json',
    };

    let round = { roundId : 1, roundName : 'Primera Ronda', sortOrder:1, teamSize:8 };
    let tournament = { tournamentId: 1, tournamentName: 'Australian Open' };

    try {
        console.log('Started generating round '+round.roundName);
        users = await documentClient.scan({ TableName: 'SaqueGanador-Users' });
        for (const user of users.Items) {
            console.log('Started generating round for user '+ JSON.stringify(user));
            let team = await createTeam( user, tournament, round);
            teams.push(team);
            console.log('Finished generating round for user '+user["userName"]);
        };
        console.log('Finished generating round '+round.roundName);
    } catch (err) {
        console.log('Error generating round '+err);
        statusCode = '400';
        body = err.message;
    } finally {
        body = JSON.stringify(teams);
    }

    return {
        statusCode,
        body,
        headers,
    };
};

export const createTeam = async (pUser , pTournament, pRound) =>  {
    console.log('begin createTeam '+ JSON.stringify(pUser) );
    let team = null;
    
    try {
        // create the key for the new instances
        let key = pTournament.tournamentId + '-' + pRound.roundId + '-' + pUser.userId;
        console.log('key createTeam '+ key);
    
        // fetch team from db if exists
        let teamResult = await getTeam(key);
        team = teamResult.Item;
        console.log('after get '+JSON.stringify(team));
        
        // if it does not, create a new one
        if( !team ){
            console.log('could not find team '+key)
            team = {
                teamId: key,
                user: pUser,
                tournament: pTournament, 
                round: pRound, 
                selection: [],
                score: 0
            } ;
        } 
        
        // initialize selection
        if( !team.selection.length ) {
            for( let i=0; i < pRound.teamSize; i++){
                team.selection.push(JSON.parse(JSON.stringify((emptySelection))));
                team.selection[i].position = i+1;
            }
        }
        
        // if there was a previous round, fill in victorious players
        
        await saveTeam( team );  
        
    } catch ( err ){
        console.log('error createTeam '+ err);
    }
    
    console.log('end createTeam' );
    return team;
}

export const emptySelection = {
        "position" : 0, 
        "playerStats" : {
            "player": {}, 
            "pointsToAward": null
        },
        "playerMultiplier" : 0,
        "playerScore": 0,
        "played": false
    };

export const saveTeam = async (team) =>  {
    let ret = null;
    console.log('begin saveTeam '+JSON.stringify(team));
    try {
        var params = {
          TableName: 'SaqueGanador-Teams',
          Item: team
        };
        ret = await documentClient.put(params);
    } catch (err) {
        console.log('Error saving to dynamo '+err);
    }
    console.log('end saveTeam '+JSON.stringify(ret));
    return ret;
}

export const getTeam = async(key) => {
    let team = await documentClient.get({
              TableName: "SaqueGanador-Teams",
              Key: {teamId: key},
            });
    return team;
}



