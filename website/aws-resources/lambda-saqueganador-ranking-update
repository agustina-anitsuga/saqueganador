import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocument } from '@aws-sdk/lib-dynamodb';


const client = new DynamoDBClient({
  region: process.env.AWS_REGION,
});
const documentClient = DynamoDBDocument.from(client);


export const handler = async (event) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    let body;
    let users;
    let statusCode = '200';
    let ranking = [];
    const headers = {
        'Content-Type': 'application/json',
    };

    let minRound = 1;
    let maxRound = 1;
    let tournamentId = 1;

    try {
        
        ranking = await calculateScores( minRound, maxRound, tournamentId );
        
        ranking = await calculatePositions( minRound, maxRound, tournamentId );
        
    } catch (err) {
        console.log('Error generating round '+err);
        statusCode = '400';
        body = err.message;
    } finally {
        body = JSON.stringify(ranking);
    }

    return {
        statusCode,
        body,
        headers,
    };
};

export const calculatePositions = async( minRound, maxRound, tournamentId ) => {
    let ranking = [];
    console.log('Begin Calculating ranking positions');
    for( let roundId = minRound; roundId<=maxRound; roundId++ ){
        let rankingsPerRound = await getRankingsPerRound( tournamentId, roundId );
        let sortedRankingsPerRound = await sortRankings(rankingsPerRound.Items);
        let position = 0;
        let lastScore = -1;
        for( let i=0; i<sortedRankingsPerRound.length; i++){
            let r = sortedRankingsPerRound[i];
            if( !(r.score === lastScore) ){
                position = position +1;
            }
            r.position = position;
            lastScore = r.score;
            await saveRanking(r);
            ranking.push(r);
        }
        console.log('calculated ranking positions in round '+roundId+'->'+JSON.stringify(ranking));
    }
    let globalRankings = await getGlobalRankings( tournamentId );
    let sortedGlobalRankings = await sortRankings(globalRankings.Items);
    let position = 0;
    let lastScore = -1;
    for( let i=0; i<sortedGlobalRankings.length; i++){
        let r = sortedGlobalRankings[i];
        if( !(r.score === lastScore) ){
            position = position +1;
        }
        r.position = position;
        lastScore = r.score;
        await saveRanking(r);
        ranking.push(r);
    }
    console.log('calculated global ranking positions ->'+JSON.stringify(ranking));
    
    console.log('End Calculating ranking positions');
    return ranking;
}

export const sortRankings = ( rankings ) => {
    console.log('to sort '+JSON.stringify(rankings));
    return rankings.sort( function(a, b){ a.score - b.score } );
}

export const calculateScores = async( minRound, maxRound, tournamentId ) => {
    console.log('Started calculateScores');
    let ranking = [];
    let users = await documentClient.scan({ TableName: 'SaqueGanador-Users' });
    for (const user of users.Items) {
        console.log('Started calculateScores for user '+ JSON.stringify(user));
        let userGlobalScore = 0;
        let r = null;
        for( let roundId = minRound; roundId<=maxRound; roundId++ ){
          r = await processRanking( user, tournamentId, roundId);
          userGlobalScore += r.score;
          ranking.push(r);
        }
        if( r ){
            console.log('before processing global ranking r is '+JSON.stringify(r));
            await processGlobalRanking( user, r.tournament, userGlobalScore );
        }
        console.log('Finished calculateScores for user '+user["userName"]);
    };
    console.log('Finished calculateScores');
    return ranking;
}

export const getRankingsPerRound = async( pTournamentId, pRoundId ) => {
    const partialKey = pTournamentId + '-' + pRoundId + '-';
    console.log('begin getRankingsPerRound '+ partialKey );
    const params = {
        TableName: 'SaqueGanador-Ranking',
        ScanFilter: {
           "rankingId": {
                ComparisonOperator: "BEGINS_WITH",
                AttributeValueList: [partialKey]
           }
        }
    };
    let rankings = await documentClient.scan(params);
    console.log('end getRankingsPerRound' );
    return rankings;
}

export const getGlobalRankings = async( pTournamentId ) => {
    const partialKey = pTournamentId + '--';
    console.log('begin getGlobalRankings '+ partialKey );
    const params = {
        TableName: 'SaqueGanador-Ranking',
        ScanFilter: {
           "rankingId": {
                ComparisonOperator: "BEGINS_WITH",
                AttributeValueList: [partialKey]
           }
        }
    };
    let rankings = await documentClient.scan(params);
    console.log('end getGlobalRankings' );
    return rankings;
}

export const processGlobalRanking = async (pUser , pTournament, pUserGlobalScore) =>  {
    console.log('begin processGlobalRanking '+ JSON.stringify(pUser) + ' ' + JSON.stringify(pTournament) + ' ' + pUserGlobalScore);

    let ranking = null;
    
    try {
        // create the key for the new instances
        let key = pTournament.tournamentId + '--' + pUser.userId;
        console.log('key processGlobalRanking '+ key);
            
        // generate ranking entry
        ranking = getRanking(key).Item;
        if(!ranking){
            ranking = {
                rankingId: key,
                tournament: pTournament,
                round: { roundId: null, roundName: '',  sortOrder: 0 },
                user: pUser,
                score: 0,
                position: 0
            };
        };
        ranking.score = pUserGlobalScore;
        await saveRanking( ranking );
        
    } catch ( err ){
        console.log('error processGlobalRanking '+ err);
    }
    
    console.log('end processGlobalRanking' );
    return ranking;
}

export const processRanking = async (pUser , pTournamentId, pRoundId) =>  {
    console.log('begin processRanking '+ JSON.stringify(pUser) );
    let ranking = null;
    
    try {
        // create the key for the new instances
        let key = pTournamentId + '-' + pRoundId + '-' + pUser.userId;
        console.log('key processRanking '+ key);
    
        // fetch team from db if exists
        let teamResult = await getTeam(key);
        let team = teamResult.Item;
        if( team ){
            // updatescore in team
            let score = 0; 
            for (const selection of team.selection){
                score += selection.playerScore;
            }
            team.score = score;
            await saveTeam( team );
            
            // generate ranking entry
            ranking = getRanking(key).Item;
            if(!ranking){
                ranking = {
                    rankingId: key,
                    tournament: team.tournament,
                    round: team.round,
                    user: pUser,
                    score: 0,
                    position: 0
                };
            };
            ranking.score = team.score;
            await saveRanking( ranking );
        } 
        
    } catch ( err ){
        console.log('error processRanking '+ err);
    }
    
    console.log('end processRanking' );
    return ranking;
}

export const saveTeam = async (team) =>  {
    let ret = null;
    console.log('begin saveTeam '+JSON.stringify(team));
    try {
        var params = {
          TableName: 'SaqueGanador-Teams',
          Item: team
        };
        ret = await documentClient.put(params);
    } catch (err) {
        console.log('Error saving to dynamo '+err);
    }
    console.log('end saveTeam '+JSON.stringify(ret));
    return ret;
}

export const saveRanking = async (ranking) =>  {
    let ret = null;
    console.log('begin saveRanking '+JSON.stringify(ranking));
    try {
        var params = {
          TableName: 'SaqueGanador-Ranking',
          Item: ranking
        };
        ret = await documentClient.put(params);
    } catch (err) {
        console.log('Error saving to dynamo '+err);
    }
    console.log('end saveRanking '+JSON.stringify(ret));
    return ret;
}

export const getTeam = async(key) => {
    let team = await documentClient.get({
              TableName: "SaqueGanador-Teams",
              Key: {teamId: key},
            });
    return team;
}

export const getRanking = async(key) => {
    let ranking = await documentClient.get({
              TableName: "SaqueGanador-Ranking",
              Key: {rankingId: key},
            });
    return ranking;
}


